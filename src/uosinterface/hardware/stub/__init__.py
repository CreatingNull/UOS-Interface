"""Package is used as a simulated UOSInteface for test purposes."""
from typing import Tuple

from uosinterface.hardware.uosabstractions import ComResult
from uosinterface.hardware.uosabstractions import UOS_SCHEMA
from uosinterface.hardware.uosabstractions import UOSFunction
from uosinterface.hardware.uosabstractions import UOSInterface


class NPCStub(UOSInterface):
    """Class can be used as a low level test endpoint."""

    def __init__(self, connection: str, errored: int = 0):
        """Instantiate an instance of the test stub."""
        self.__packet_buffer = []
        self.__open = False
        self.errored = errored
        self.connection = connection

    def execute_instruction(self, address: int, payload: Tuple[int, ...]) -> ComResult:
        """
        Simulates executing an instruction on a UOS endpoint.

        Should check weather the last instruction was valid and store
        it. This will allow read response to provide more realistic
        responses.

        """
        for function in UOS_SCHEMA:
            for vol in UOS_SCHEMA[function].address_lut:
                if UOS_SCHEMA[function].address_lut[
                    vol
                ] == address and self.__check_required_args(
                    payload, UOS_SCHEMA[function]
                ):
                    if UOS_SCHEMA[function].ack:
                        self.__packet_buffer.append(
                            self.get_npc_packet(0, address, tuple([0]))
                        )
                    for rx_packet in UOS_SCHEMA[function].rx_packets_expected:
                        self.__packet_buffer.append(
                            self.get_npc_packet(
                                0, address, tuple(0 for _ in range(rx_packet))
                            )
                        )
                    return ComResult(True)
        return ComResult(False)

    def read_response(self, expect_packets: int, timeout_s: float) -> ComResult:
        """
        Simulates gathering the response from an instruction.

        Should have already executed an instruction. If no response is
        generated by instruction will error accordingly.

        """
        result = ComResult(False)
        if len(self.__packet_buffer) > 0:
            result.ack_packet = self.__packet_buffer.pop(0)
            result.status = True
        for _ in self.__packet_buffer:
            result.rx_packets.append(self.__packet_buffer.pop(0))
        return result

    def hard_reset(self) -> ComResult:
        """Over-riding base prototype, simulates reset."""
        return ComResult(status=True)

    def open(self) -> bool:
        """Over-riding base prototype, simulates opening a connection."""
        if len(self.connection) > 0:
            self.__open = True
            return True
        else:
            return False

    def close(self) -> bool:
        """Over-riding base prototype, simulates close a connection."""
        self.__open = False
        return self.errored == 0

    @staticmethod
    def enumerate_devices() -> []:
        """Returns a list of test stubs implemented in the interface."""
        return [NPCStub("STUB")]  # The test stub is always available

    @staticmethod
    def __check_required_args(payload: Tuple[int, ...], function: UOSFunction) -> bool:
        """
        Checks formatted payload against a UOS schema payload definition.

        :param payload: Formatted payload tuple of ints.
        :param function: UOSFunction schema definition.
        :return: Boolean for if there is a match.

        """
        if function.required_arguments is not None and len(
            function.required_arguments
        ) == len(payload):
            for i, argument in enumerate(function.required_arguments):
                if argument is not None and argument != payload[i]:
                    return False
        return True
